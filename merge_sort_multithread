#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#define VETOR_MAX 12
#define THREAD_MAX 4
int parte = 0;
int numeros[VETOR_MAX];
int numeros_thread[THREAD_MAX][VETOR_MAX / THREAD_MAX];

int Merge_sort (int v[], int tam)
{
    if (tam <= 1)
        return 0;
    int med = tam / 2;
    int k = 0;
    int v1[med], v2[tam - med];
    for (int i = 0; i < med; i++)
        v1[i] = v[k++];
    for (int j = 0; j < tam - med; j++)
        v2[j] = v[k++];
    Merge_sort(v1, med);
    Merge_sort(v2, tam - med);
    Merge(v, v1, v2, med, tam - med);
    return 0;
}

int Merge (int v[], int v1[], int v2[], int v1_tam, int v2_tam)
{
    int i, j, k;
    for (i = 0, j = 0, k = 0; j < v1_tam && k < v2_tam; i++)
    {
        if(v1[j] <= v2[k]) v[i] = v1[j++];
        else v[i] = v2[k++];
    }
    while (j < v1_tam) v[i++] = v1[j++];
    while (k < v2_tam) v[i++] = v2[k++];
    return 0;
}

int Numero_aleatorio (int vetor[]) {
    for (int i = 0; i < VETOR_MAX; i++) {
        srand((unsigned) time(NULL) + i);
        vetor[i] = rand() % 10000 + 1;
    }
    return 0;
}

void Print_vetor (int vetor[])
{
    for (int i = 0; i < VETOR_MAX / THREAD_MAX; i++)
        printf("%d\n", vetor[i]);
}

void* Merge_sort_multithread (void* p){
    int* a = (int*) p;
    for (int i = 0; i < VETOR_MAX / THREAD_MAX; i++)
        numeros_thread[*a][i] = numeros[parte++];

    Merge_sort(numeros_thread[*a], VETOR_MAX / THREAD_MAX);
    pthread_exit(NULL);

}

int main(int argc, char const *argv[])
{
    //Gerar numeros aleatorios
    Numero_aleatorio(numeros);

    //Declarar um vetor de threads
    pthread_t threads[THREAD_MAX];


    for (int i = 0; i < THREAD_MAX; i++)
        pthread_create(&threads[i], NULL, Merge_sort_multithread, (void*) &i);

    for (int i = 0; i < THREAD_MAX; i++)
        pthread_join(threads[i], NULL);

    for (int i = 0; i < THREAD_MAX; i++)
    {
        for (int j = 0; j < VETOR_MAX / THREAD_MAX; j++)
            printf("%d\n", numeros_thread[i][j]);
    }
    return 0;
}
