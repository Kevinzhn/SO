#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#define VETOR_MAX 4000
#define THREAD_MAX 4
#define VETOR_THREAD VETOR_MAX / THREAD_MAX

int Merge (int v[], int v1[], int v2[], int v1_tam, int v2_tam)
{
    int i, j, k;
    for (i = 0, j = 0, k = 0; j < v1_tam && k < v2_tam; i++)
    {
        if(v1[j] <= v2[k]) v[i] = v1[j++];
        else v[i] = v2[k++];
    }
    while (j < v1_tam) v[i++] = v1[j++];
    while (k < v2_tam) v[i++] = v2[k++];
    return 0;
}

int Merge_sort (int v[], int tam)
{
    if (tam <= 1)
        return 0;
    int med = tam / 2;
    int k = 0;
    int v1[med], v2[tam - med];
    for (int i = 0; i < med; i++)
        v1[i] = v[k++];
    for (int j = 0; j < tam - med; j++)
        v2[j] = v[k++];
    Merge_sort(v1, med);
    Merge_sort(v2, tam - med);
    Merge(v, v1, v2, med, tam - med);
    return 0;
}

void Merge_4_threads (int **vetor, int *v)
{
    int *v1 = malloc(sizeof(int) * VETOR_MAX / 2);
    int *v2 = malloc(sizeof(int) * VETOR_MAX / 2);
    Merge(v1, vetor[0], vetor[1], VETOR_THREAD, VETOR_THREAD);
    Merge(v2, vetor[2], vetor[3], VETOR_THREAD, VETOR_THREAD);
    Merge(v, v1, v2, VETOR_MAX / 2, VETOR_MAX / 2);
    free(v1);
    free(v2);
}

int Numero_aleatorio (int **vetor, int x, int y)
{
    for (int i = 0; i < x; i++)
    {
        srand((unsigned) time(NULL) + i);
        for (int j = 0; j < y; j++)
            vetor[i][j] = rand() % 99999 + 1;
    }
    return 0;
}

void* Merge_sort_multithread (void* vetor)
{
    int *a = (int*) vetor;
    Merge_sort(a, VETOR_THREAD);
    pthread_exit(NULL);
}

int **Malloc_matriz(size_t size, int x, int y)
{
    int **m = malloc(sizeof(size) * x);
    for (int i = 0; i < x; i++)
        m[i] = malloc(size * y);
    return m;
}

int main()
{
    //Alocar um matriz de numero
    int **numeros = Malloc_matriz(sizeof(int), THREAD_MAX, VETOR_THREAD);

    //Gerar numeros aleatorios
    Numero_aleatorio(numeros, THREAD_MAX, VETOR_THREAD);

    //Declarar um vetor de threads
    pthread_t threads[THREAD_MAX];

    //Criar threads que ordena numeros
    for (int i = 0; i < THREAD_MAX; i++)
        pthread_create(&threads[i], NULL, Merge_sort_multithread, numeros[i]);

    for (int i = 0; i < THREAD_MAX; i++)
        pthread_join(threads[i], NULL);

    int *resultado = malloc(sizeof(int) * VETOR_MAX);
    Merge_4_threads(numeros, resultado);

    //Gravar resultado em arquivo txt
    FILE *file  = fopen("vetor_ordenado.txt", "w");
    for (int i = 0; i < VETOR_MAX; i++)
        fprintf(file, "%d\n", resultado[i]);

    fclose(file);

    for (int i = 0; i < THREAD_MAX; i++)
        free(numeros[i]);
        
    free(numeros);
    free(resultado);
    return 0;
}
